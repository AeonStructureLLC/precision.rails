
<div id="CheckoutList">
  <%= render :partial => '/checkouts/checkout_list' %>
</div>

<div id="CartCostSummaryWrapper">
  <div id="CartCostSummary">
    <div id="CheckoutSubTotalWrapper" class="cart_cost_summary_item">
      <div class="cart_label">Subtotal</div>
      <div id="CheckoutSubTotal"><%= number_to_currency(@cart.subtotal) %></div>
    </div>
    <div id="CheckoutShippingWrapper" class="cart_cost_summary_item">
      <div class="cart_label">Shipping</div>
      <div id="CheckoutShipping">$0</div>
    </div>
    <div id="CheckoutTaxWrapper" class="cart_cost_summary_item">
      <div class="cart_label">Tax</div>
      <div id="CheckoutTax">$0</div>
    </div>
    <div id="CheckoutTotalWrapper" class="cart_cost_summary_item">
      <div class="cart_label">Total</div>
      <div id="CheckoutTotal"><%= number_to_currency(@cart.subtotal) %></div>
    </div>
  </div>
</div>



<% if current_user.class == AnonymousUser %>
  <div id="UserSessionWrapper">
    <div id="UserSessionExplanation">
      Sign-in or Sign-up : WORDS
    </div>
    <div id="UserSession">
      <div class="field_wrapper"><label>E-Mail: </label><input type="email" id="UserSessionEmail" placeholder="Enter your E-Mail address"/></div>
      <div class="field_wrapper"><label>Password: </label><input type="password" id="UserSessionPassword" class="passwords" placeholder="Enter your password"/></div>
      <div id="UserSessionPasswordConfirmationWrapper" class="hidden field_wrapper"><label>Password Confirmation: </label><input type="password" class="passwords" id="UserSessionPasswordConfirmation" placeholder="Enter your password again"/></div>
      <div id="ForgotPasswordWrapper" class="hidden"><a href="#">Forgot password?</a></div>
      <div id="SignInButton" class="hidden">Sign In</div>
      <div id="SignUpButton" class="hidden">Sign Up</div>
    </div>
  </div>
<% end %>

<div id="ReviewAndAuthorizeWrapper" class="hidden">
  <div id="AddressesWrapper">
    <%= render :partial => "/addresses/addresses_list" %>
  </div>

  <div id="ShippingOptionsWrapper"></div>

  <% unless @storefront.stripe_publish.blank? %>
    <div id="StripeCardsWrapper">
      <%= render :partial => "/stripe_cards/stripe_cards_list" %>
    </div>
  <% end %>

  <a id="ReviewAndAuthorizeButton"  class="" href="#">Review & Authorize</a>
</div>

<div id="AddAddressModal" class="aeon_modal hidden">
  <div id="NewAddress">
    <input type="text" id="NewAddressAddress1" name='address1' placeholder="Street Address"/>
    <input type="text" id="NewAddressAddress2" name='address2' placeholder="Apartment #, Suite, etc"/>
    <input type="text" id="NewAddressCity" name='city' placeholder="City"/>
    <input type="text" id="NewAddressState" name='state' placeholder="State"/>
    <input type="text" id="NewAddressPostalCode" name='postal_code' placeholder="Zip Code"/>
    <div id="AddNewAddressButton">Add Address</div>
  </div>
</div>

<% unless @storefront.stripe_publish.blank? %>
<div id="AddStripeCardModal" class="aeon_modal hidden">
  <script type="text/javascript" src="https://js.stripe.com/v2/"></script>
  <div id="StripeCardErrors"></div>

  <div id="NewStripeCard">
    <input type="text" id="CardNumber" name='number' data-stripe="number" placeholder="Card Number"/>
    <input type="text" id="CVC" name='cvc' data-stripe="cvc" placeholder="CVC"/>
    <input type="text" id="CardExpMonth" name='exp-month' data-stripe="exp-month" placeholder="MM"/>
    <input type="text" id="CardExpYear" name='exp-year' data-stripe="exp-year" placeholder="YYYY"/>
    <div id="AddNewCardButton">Add Card</div>
  </div>

  </form>

  <script type="text/javascript">
    Stripe.setPublishableKey('<%= @storefront.stripe_publish %>');

    var stripeResponseHandler = function(status, response) {
      var $form = $('#payment-form');

      if (response.error) {
        // Show the errors on the form
        //TODO  MAKE THIS SHOW UP SOMEWHERE
        var error_ui = $("#StripeCardErrors");
        error_ui.hide();
        error_ui.html(response.error.message);
        error_ui.fadeIn();
        console.log(response.error.message);
      } else {
        var stripe_token = response.id;
        console.log("Stripe Token Auth Successful: " + stripe_token);
        var params = {
          stripe_token: stripe_token
        }
        var url = "/create_stripe_customer_for_user";
        $.ajax({
          url: url,
          dataType: 'html',
          type: 'POST',
          data: params,
          success: function(data){
            console.log("Completed creating StripeCard, need to refresh now.");
            $("#AeonModalBlocker").click();
            $("#StripeCardsWrapper").html(data);
          }
        });
      }
    };

    $(document).off('click', '#AddNewCardButton');
    $(document).on('click', '#AddNewCardButton', function(e){
      var self = this;
      $("#StripeCardErrors").hide();
      var fields = $("#NewStripeCard");
      Stripe.createToken(fields, stripeResponseHandler);
      return false;
    });

  </script>
</div>
<% end %>

<script type="text/javascript">
  var FoundUser = false;

  function updateTaxRate(){
    var postal_code = $('.is_shipping.selected_true').closest("[model_root]").find('.postal_code').text();
    if(postal_code.length != 0){
      var params = {
        zip: postal_code
      }
      $.ajax({
        url: "/get_tax_rate_for_zip",
        data: params,
        dataType: 'json',
        success: function(data){
          CartTaxRate = Number(data);
          updateItemCountAndSubtotal();
        }
      });
    }
  }

  function updateShippingOptions(){
    var html = [];
    html.push("<div id='ShippingOptionsPlaceholder'>");
    html.push("<img class='loading_spinner' src='/images/spinner.gif'>");
    html.push("<div class='loading_text'>Looking up shipping options...</div>");
    html.push("</div>");
    html = html.join("\n");
    $("#ShippingOptionsWrapper").html(html);
    $.ajax({
      url: "/get_shipping_options_for_cart",
      dataType: 'html',
      success: function(data){
        $("#ShippingOptionsWrapper").html(data);
        //console.log(data);
      }
    });
  }

  function resetUserOptionsForm(){
    $("#UserSessionPassword").attr('value', '');
    $("#UserSessionPasswordConfirmation").attr('value', '');
    $("#ForgotPasswordWrapper").addClass('hidden');
    $("#UserSessionPasswordConfirmationWrapper").addClass('hidden');
    $("#SignInButton").addClass('hidden');
    $("#SignUpButton").addClass('hidden');
  }

  $(document).off('click', '#CurrentCart');
  $("#AdminNavigation").addClass('hidden');

  $(document).on('blur', '#UserSessionEmail', function(){
    var self = $(this)
    var email = self.attr('value');
    if(email.length > 4){
      var params = {
        email: email
      }
      $.ajax({
        url: "/check_registration.json",
        data: params,
        dataType: 'json',
        statusCode: {
          404: function(){
            FoundUser = false;
            $("#UserSessionPasswordConfirmationWrapper").removeClass('hidden');
            $("#ForgotPasswordWrapper").addClass('hidden');
            $("#SignInButton").addClass('hidden');
          },
          200: function(){
            FoundUser = true;
            $("#UserSessionPasswordConfirmationWrapper").addClass('hidden');
            $("#ForgotPasswordWrapper").removeClass('hidden');
            $("#SignUpButton").addClass('hidden');
            $("#SignInButton").removeClass('hidden');
          }
        }
      });
    } else {
      resetUserOptionsForm();
    }
  });

  $(document).on('keyup', "#UserSessionEmail", function(){
    var self = $(this);
    var email = self.attr('value');
    if(email.length <= 1){
      resetUserOptionsForm();
    }
  });

  $(document).on('keyup', ".passwords", function(){
    var password = $("#UserSessionPassword").attr('value');
    var password_confirmation = $("#UserSessionPasswordConfirmation").attr('value');
    if(password.length >= 5){
      if(password === password_confirmation){
        $("#SignUpButton").removeClass('hidden');
      }
    }
  });

  $(document).on('click', '#SignUpButton', function(){
    var params = {
      user: {
        email: $("#UserSessionEmail").attr("value"),
        password: $("#UserSessionPassword").attr("value"),
        password_confirmation: $("#UserSessionPasswordConfirmation").attr("value")
      }
    }
    $.ajax({
      url: "/users.json",
      dataType: 'json',
      type: 'POST',
      data: params,
      success: function(data){
        CurrentUser = data;
        $("#UserSessionWrapper").addClass('hidden');
        $("#UserControls").removeClass('hidden');
        $("#CurrentUserGreeting").html(CurrentUser.greeting);
        $("#ReviewAndAuthorizeWrapper").removeClass('hidden');

      }
    });
  });

  $(document).on('click', '#SignInButton', function(){
    var params = {
      user: {
        email: $("#UserSessionEmail").attr("value"),
        password: $("#UserSessionPassword").attr("value")
      },
      anon_user_id: CurrentUser.id
    }
    $.ajax({
      url: "/users/sign_in.json",
      dataType: 'json',
      type: 'POST',
      data: params,
      success: function(data){
        CurrentUser = data;
        $("#UserSessionWrapper").addClass('hidden');
        $("#UserControls").removeClass('hidden');
        $("#CurrentUserGreeting").html(CurrentUser.greeting);
        $.ajax({
          url: "/cart/list",
          dataType: 'html',
          success: function(data){
            $("#CartItemList").html(data);
            $("#CheckoutList").html(data);
            updateItemCountAndSubtotal();
            $("#ReviewAndAuthorizeWrapper").removeClass('hidden');
          }
        });
      }
    });
  });

  $(document).off('click', '#AddStripeCard');
  $(document).on('click', '#AddStripeCard', function(){
    $("#AeonModalBlocker").removeClass('hidden');
    $("#AddStripeCardModal").removeClass('hidden').center();
    var inputs = $("#AddStripeCardModal").find('input');
    _.each(inputs, function(input){
      $(input).attr('value', '');
    });
    $("#CardNumber").focus();
  });

  $(document).off('click', '.stripe_card_listing');
  $(document).on('click', '.stripe_card_listing', function(e){
    var self = $(this);
    if(self.hasClass('default_true')){
      console.log("Already selected!");
    } else {
      $('.stripe_card_listing').removeClass('default_true').addClass('default_false');
      self.removeClass('default_false').addClass('default_true');
      var stripe_card_id = self.attr('model_id');
      var params = {
        stripe_card_id: stripe_card_id
      }
      $.ajax({
        url: "/set_default_stripe_card",
        data: params,
        dataType: 'json',
        success: function(data){
          console.log("Default Stripe Card Updated.");
        }
      });
    }
  });

  $(document).off('click', '.delete_stripe_card_icon');
  $(document).on('click', '.delete_stripe_card_icon', function(e){
    e.stopImmediatePropagation();
    var self = $(this);
    if( confirm("Deleting this card can not be undone, are you sure you want to do this?")){
      var model_root = self.closest('[model_root]')

      var stripe_card_id = model_root.attr('model_id');
      var params = {
        stripe_card_id: stripe_card_id
      }
      model_root.removeClass('default_true').addClass('default_false deleting_card');
      var url = "/stripe_cards/" + stripe_card_id;
      $.ajax({
        url: url,
        data: params,
        dataType: 'json',
        type: 'DELETE',
        success: function(data){
          console.log("Card Deleted.");
          model_root.remove();
          var stripe_cards = $(".stripe_card_listing");
          if(stripe_cards.length == 1){
            $(stripe_cards[0]).click();
          }
        }
      });
    }
  });


  $(document).off('click', '#AddAddress');
  $(document).on('click', '#AddAddress', function(){
    $("#AeonModalBlocker").removeClass('hidden');
    $("#AddAddressModal").removeClass('hidden').center();
    var inputs = $("#AddAddressModal").find('input');
    _.each(inputs, function(input){
      $(input).attr('value', '');
    });
    $("#NewAddressAddress1").focus();
  });

  $(document).off('click', '#AddNewAddressButton');
  $(document).on('click', '#AddNewAddressButton', function(e){
    var self = this;
    var params = { address: {} };

    var inputs = $("#AddAddressModal").find('input');
    _.each(inputs, function(input){
      var attribute = $(input).attr('name');
      var value = $(input).attr('value');
      params.address[attribute] = value;
    });

    var url = "/addresses/new";

    $.ajax({
      url: url,
      data: params,
      dataType: 'html',
      success: function(data){
        console.log(data);
        $("#AddressesWrapper").html(data);
        $("#AeonModalBlocker").click();
        updateTaxRate();
      }
    });

  });

  $(document).off('click', '.is_shipping');
  $(document).on('click', '.is_shipping', function(e){
    var self = $(this);
    if(self.hasClass('selected_true')){
      console.log("Already selected!");
    } else {
      $('.is_shipping').removeClass('selected_true').addClass('selected_false');
      self.removeClass('selected_false').addClass('selected_true');
      updateTaxRate();
      var address_id = self.closest('[model_root]').attr('model_id');
      var params = {
        address_id: address_id
      }
      $.ajax({
        url: "/set_default_shipping_address",
        data: params,
        dataType: 'json',
        success: function(data){
          console.log("Default Shipping Address Updated.");
        }
      });
    }
  });

  $(document).off('click', '.is_billing');
  $(document).on('click', '.is_billing', function(e){
    var self = $(this);
    if(self.hasClass('selected_true')){
      console.log("Already selected!");
    } else {
      $('.is_billing').removeClass('selected_true').addClass('selected_false');
      self.removeClass('selected_false').addClass('selected_true');
      var address_id = self.closest('[model_root]').attr('model_id');
      var params = {
        address_id: address_id
      }
      $.ajax({
        url: "/set_default_billing_address",
        data: params,
        dataType: 'json',
        success: function(data){
          console.log("Default Billing Address Updated.");
        }
      });
    }
  });

  $(document).off('click', '.delete_address_icon');
  $(document).on('click', '.delete_address_icon', function(e){
    var self = $(this);
    if( confirm("Deleting this address can not be undone, are you sure you want to do this?")){
      var model_root = self.closest('[model_root]')
      var address_id = model_root.attr('model_id');
      var params = {
        address_id: address_id
      }
      var url = "/addresses/" + address_id;
      $.ajax({
        url: url,
        data: params,
        dataType: 'json',
        type: 'DELETE',
        success: function(data){
          console.log("Address Deleted.");
          model_root.remove();
        }
      });
    }
  });

  $(document).ready(function(){
    $("#StripeCardErrors").hide();
    updateShippingOptions();
    updateTaxRate();
    //updateShippingOptions();
    if(CurrentUser.is_anonymous == false){
      $("#ReviewAndAuthorizeWrapper").removeClass('hidden');
    }

  });
</script>